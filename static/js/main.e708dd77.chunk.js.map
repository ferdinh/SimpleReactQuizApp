{"version":3,"sources":["components/QuestionCard.tsx","components/QuestionList.tsx","model/Question.ts","Util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionCard","props","useState","isUserAnswered","setIsUserAnswered","userAnsweredCorrectly","setUserAnsweredCorrectly","userAnswer","setUserAnswer","renderAnswer","idx","answer","color","answerId","correctAnswerIndex","determineColor","Button","className","disabled","onClick","onUserAnswer","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","Container","Card","CardHeader","questionNumber","question","CardBody","possible_answers","map","QuestionList","questionList","setQuestionList","correctAnswer","setCorrectAnswer","correctly","useEffect","listOfQuestions","Row","Col","xs","md","lg","id","correct_answer_index","length","Alert","Question","questionResult","category","type","difficulty","this","combinedAnswers","correct_answer","incorrect_answers","arr","i","j","Math","floor","random","shuffleArray","findIndex","s","App","questions","setQuestions","loadQuestions","a","console","log","fetch","request","json","data","results","mappedData","push","renderStartButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e708dd77.chunk.js","sourcesContent":["import DOMPurify from \"dompurify\";\r\nimport React, {useState} from \"react\";\r\nimport {Button, Card, CardBody, CardHeader, Container} from \"reactstrap\";\r\n\r\nexport default function QuestionCard(props: { questionNumber: number, question: string, possible_answers: string[], correctAnswerIndex: number, onUserAnswer: (correctly: boolean) => void }) {\r\n    const CHAR = 'ABCD';\r\n\r\n    const [isUserAnswered, setIsUserAnswered] = useState(false);\r\n    const [userAnsweredCorrectly, setUserAnsweredCorrectly] = useState(false);\r\n    const [userAnswer, setUserAnswer] = useState(-1);\r\n\r\n    const checkAnswer = (answerId: number) => {\r\n        setUserAnswer(answerId);\r\n        setIsUserAnswered(true);\r\n\r\n        if (props.correctAnswerIndex === answerId) {\r\n            setUserAnsweredCorrectly(true);\r\n            props.onUserAnswer(true);\r\n        }\r\n    }\r\n\r\n    function determineColor(answerId: number): string {\r\n        if (isUserAnswered) {\r\n            if (answerId === props.correctAnswerIndex) {\r\n                return 'success';\r\n            }\r\n            if (!userAnsweredCorrectly) {\r\n                if (answerId === userAnswer) {\r\n                    return 'danger';\r\n                }\r\n            }\r\n        }\r\n\r\n        return 'secondary';\r\n    }\r\n\r\n    function renderAnswer(idx: number, answer: string) {\r\n\r\n        const color = determineColor(idx);\r\n\r\n        return (\r\n            <li key={`answer-${idx}`}>\r\n                <Button className='mb-2'\r\n                        disabled={isUserAnswered}\r\n                        color={color}\r\n                        onClick={() => checkAnswer(idx)}\r\n                        dangerouslySetInnerHTML={{__html: `${CHAR[idx]}. ${DOMPurify.sanitize(answer)}`}}></Button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Card>\r\n                <CardHeader\r\n                    dangerouslySetInnerHTML={{__html: `${props.questionNumber}. ${DOMPurify.sanitize(props.question)}`}}></CardHeader>\r\n                <CardBody>\r\n                    <ul className=\"Answer-list\">\r\n                        {props.possible_answers.map((answer, idx) => (\r\n                            renderAnswer(idx, answer)\r\n                        ))}\r\n                    </ul>\r\n                </CardBody>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Question from \"../model/Question\";\r\nimport QuestionCard from \"./QuestionCard\";\r\nimport {Alert, Col, Container, Row} from \"reactstrap\";\r\n\r\n\r\nexport default function QuestionList(props: { listOfQuestions: Question[] }) {\r\n    const [questionList, setQuestionList] = useState<Question[]>([]);\r\n    const [correctAnswer, setCorrectAnswer] = useState(0);\r\n\r\n    function onUserAnswer(correctly: boolean) {\r\n        if (correctly) {\r\n            setCorrectAnswer(correctAnswer + 1);\r\n        }\r\n    }\r\n\r\n    function renderScore() {\r\n        if (questionList.length !== 0) {\r\n            return (\r\n                <Row className='justify-content-center'>\r\n                    <Col xs={8} md={4} lg={4}>\r\n                        <Alert\r\n                            color=\"dark\">{questionList.length !== 0 ? `Score: ${correctAnswer}/${questionList.length}` : ''} </Alert>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setQuestionList(props.listOfQuestions);\r\n    }, [props.listOfQuestions])\r\n\r\n    return (\r\n        <Container>\r\n            <Row className='justify-content-center'>\r\n                <Col xs={12} md={6} lg={6}>\r\n                    {questionList.map((question, id) => (\r\n                        <Row className='mb-3'>\r\n                            <Col>\r\n                                <QuestionCard key={id} questionNumber={id + 1} question={question.question}\r\n                                              possible_answers={question.possible_answers}\r\n                                              correctAnswerIndex={question.correct_answer_index}\r\n                                              onUserAnswer={onUserAnswer}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    ))}\r\n                </Col>\r\n            </Row>\r\n\r\n            {renderScore()}\r\n        </Container>\r\n    )\r\n}","import {QuestionRequestResult} from \"../interface/QuestionRequestResult\";\r\nimport {QuestionType} from \"../enum/QuestionType\";\r\nimport {Difficulty} from \"../enum/Difficulty\";\r\nimport {shuffleArray} from \"../Util\";\r\n\r\nexport default class Question {\r\n    category: string;\r\n    type: QuestionType;\r\n    difficulty: Difficulty;\r\n    question: string;\r\n    possible_answers: string[];\r\n    correct_answer_index: number;\r\n\r\n    constructor(questionResult: QuestionRequestResult) {\r\n        this.category = questionResult.category;\r\n        this.type = questionResult.type;\r\n        this.question = questionResult.question;\r\n        this.difficulty = questionResult.difficulty;\r\n\r\n        const combinedAnswers: string[] = [questionResult.correct_answer, ...questionResult.incorrect_answers];\r\n\r\n        shuffleArray(combinedAnswers);\r\n\r\n        this.possible_answers = combinedAnswers;\r\n        this.correct_answer_index = this.possible_answers.findIndex(s => s === questionResult.correct_answer);\r\n    }\r\n}\r\n","export function shuffleArray<T>(arr: T[]) {\r\n    if (arr.length <= 1) return;\r\n\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport BackgroundImage from './images/bg-image.jpg';\r\nimport QuestionList from \"./components/QuestionList\";\r\nimport Question from \"./model/Question\";\r\nimport {Button} from \"reactstrap\";\r\n\r\nfunction App() {\r\n    const [questions, setQuestions] = useState<Question[]>([]);\r\n\r\n    const loadQuestions = async () => {\r\n        console.log('Retrieving questions');\r\n        const request = await fetch('https://opentdb.com/api.php?amount=10');\r\n\r\n        const data = await request.json();\r\n        const questionResult = data.results;\r\n        const mappedData: Question[] = [];\r\n\r\n        for (let i = 0; i < questionResult.length; i++) {\r\n            mappedData.push(new Question(questionResult[i]));\r\n        }\r\n\r\n        setQuestions(mappedData);\r\n    }\r\n\r\n    const renderStartButton = () => {\r\n        if (questions.length <= 0) {\r\n            return <Button onClick={() => loadQuestions()}>Start</Button>;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>React Trivia Quiz</h1>\r\n            <h2>Total Questions: {questions.length}</h2>\r\n            {renderStartButton()}\r\n            <QuestionList listOfQuestions={questions}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}